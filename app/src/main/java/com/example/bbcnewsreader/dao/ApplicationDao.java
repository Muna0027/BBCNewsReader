package com.example.bbcnewsreader.dao;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.example.bbcnewsreader.beans.Item;

import java.util.ArrayList;
import java.util.List;

public class ApplicationDao {

    public final static String COL_ID = "_id";
    public final static String COL_TITLE = "TITLE";
    public final static String COL_DESCRIPTION = "DESCRIPTION";
    public final static String COL_LINK = "LINK";
    public final static String COL_DATE = "DATE";

    /**
     * Returns a List of items that cam be displayed.
     * <p>
     * This method connects t the database, retrieves all of the columns, queries the database
     * and builds the list with the returned values.
     *
     * @param  context  an absolute URL giving the base location of the image
     */
    public List<Item> loadFavorites(Context context)
    {
        List<Item> items = new ArrayList<>();

        DBOpener dbOpener = new DBOpener(context);
        SQLiteDatabase db = dbOpener.getWritableDatabase();

        String [] columns = {dbOpener.COL_ID, dbOpener.COL_TITLE, dbOpener.COL_DESCRIPTION,
                             dbOpener.COL_LINK, dbOpener.COL_DATE};

        Cursor results = db.query(false, dbOpener.TABLE_NAME, columns, null, null, null, null, null, null);

        int idColIndex = results.getColumnIndex(dbOpener.COL_ID);
        int titleColumnIndex = results.getColumnIndex(dbOpener.COL_TITLE);
        int descriptionColIndex = results.getColumnIndex(dbOpener.COL_DESCRIPTION);
        int linkColumnIndex = results.getColumnIndex(dbOpener.COL_LINK);
        int dateColIndex = results.getColumnIndex(dbOpener.COL_DATE);

        while(results.moveToNext())
        {
            long id = results.getInt(idColIndex);
            String title = results.getString(titleColumnIndex);
            String description = results.getString(descriptionColIndex);
            String link = results.getString(linkColumnIndex);
            String date = results.getString(dateColIndex);

            //add the new Contact to the array list:
            items.add(new Item(id, title, description, link, date));
        }

        db.close();
        dbOpener.close();

        return items;
    }

    /**
     * Returns an long
     * <p>
     * This method connects to the database, breaks up the item object and inserts the related
     * values into the database and returns a long of the associated id generated by the RDBMS.
     *
     * @param  item  the item we wish to save to the database.
     * @param  context the database context if it is available.
     */
    public long addItem(Item item, Context context){

        DBOpener dbOpener = new DBOpener(context);
        SQLiteDatabase db = dbOpener.getWritableDatabase();

        ContentValues newRowValues = new ContentValues();

        newRowValues.put(DBOpener.COL_TITLE, item.getTitle());
        newRowValues.put(DBOpener.COL_DESCRIPTION, item.getDescription());
        newRowValues.put(DBOpener.COL_LINK, item.getLink());
        newRowValues.put(DBOpener.COL_DATE, item.getDate());

        long newId = db.insert(DBOpener.TABLE_NAME, null, newRowValues);

        db.close();
        dbOpener.close();

        return newId;
    }

    /**
     * Returns an int of the affected rows.
     * <p>
     * This method returns an int of the affected rows that match the given id.
     *
     * @param  id The associated id of the item that we wish to delete
     * @param  context the database context if available.
     */
    public int deleteItem(Long id, Context context)
    {
        DBOpener dbOpener = new DBOpener(context);
        SQLiteDatabase db = dbOpener.getWritableDatabase();

        int affectedRows = db.delete(DBOpener.TABLE_NAME, DBOpener.COL_ID + "= ?", new String[] {id.toString()});

        return affectedRows;
    }

    /**
     * Returns an long
     * <p>
     * This method returns the id as a long of any items that match the given parameters.
     *
     * @param  title The title of the item.
     * @param  date  The date associated with the item.
     * @param  context The database context if available.
     */
    public long checkItem(String title, String date, Context context)
    {
        title = replaceQuotes(title);

        long id = -1;

        DBOpener dbOpener = new DBOpener(context);
        SQLiteDatabase db = dbOpener.getWritableDatabase();
        String query = "SELECT " + COL_ID +
                      " From " + dbOpener.TABLE_NAME +
                      " WHERE " + COL_TITLE + " = '" + title + "'" +
                      " AND " + COL_DATE + " = '" + date + "'";
        Cursor cursor = db.rawQuery( query, null );
        cursor.moveToFirst();
        if(cursor.isAfterLast() == false) {
            id = cursor.getLong(cursor.getColumnIndex(COL_ID));
        }
        return id;
    }

    /**
     * Returns a String
     * <p>
     * This method replaces single quotes ' that would wrap a string with double quotes ".
     *
     * @param  str  The string that needs the single quotes replaced.
     */
    private String replaceQuotes(String str) {
        return str.replace("'", "''");
    }

}
